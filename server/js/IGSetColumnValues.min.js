window.mho=window.mho||{},function(namespace){function IGUpdate(options){this.ig$=options.ig$,this.grid=options.grid,this.model=this.grid.model,this.da=options.da,this.type=options.type,this.ajaxIdentifier=options.ajaxIdentifier,this.itemsToSubmit=options.itemsToSubmit,this.staticValue=options.staticValue,this.jsColumns=options.jsColumns,this.jsExpression=options.jsExpression,this.dialogReturnItem=options.dialogReturnItem,this.recordSelection=options.recordSelection,this.columnConfig=this.ig$.interactiveGrid("option","config.columns"),this.affectedColumns=options.affectedColumns,this.updateMethods={static:this.updateWithStaticValue,js:this.updateWithJavaScriptExpressionValues,sql:this.ajaxCallback,plsql:this.ajaxCallback,function:this.ajaxCallback,dialog:this.updateWithDialogReturnItems},this.setRecords(),this.data=this.getCurrentData()}function _getWidget(regionId){let region=apex.region(regionId),deferred=$.Deferred();if(region){let ig$=region.widget();ig$.length>0?deferred.resolve(ig$):region.element.on("interactivegridcreate",function(){deferred.resolve(region.widget())})}else deferred.reject(Error("No interactive grid region was found. Make sure the triggering element is an Interactive Grid"));return deferred.promise()}function setValue(options){let promise=_getWidget($(options.da.triggeringElement).attr("id"));promise.done(function(ig$){options.ig$=ig$;let gridView=ig$.interactiveGrid("getViews").grid;if(!gridView)return;let affectedColumns=options.affectedColumns.split(","),jsColumns=options.jsColumns.split(","),update=new IGUpdate({ig$:ig$,grid:gridView,da:options.da,type:options.type,ajaxIdentifier:options.ajaxIdentifier,itemsToSubmit:options.itemsToSubmit,staticValue:options.staticValue,jsColumns:jsColumns,jsExpression:options.jsExpression,dialogReturnItem:options.dialogReturnItem,recordSelection:options.recordSelection,affectedColumns:affectedColumns});update.getValues().then(function(){update.setValues()})}),promise.fail(function(err){throw err})}IGUpdate.prototype.filterJsColumns=function(){let self=this;this.jsColumns=this.jsColumns.filter(function(columnName){let column;return self.columnConfig.filter(function(column){return column.name===columnName})[0]})},IGUpdate.prototype.setRecords=function(){let self=this,recordSelections={selected:function(){return self.ig$.interactiveGrid("getSelectedRecords")},all:function(ig$){let records=[];return self.model.forEach(function(record){records.push(record)}),records}};this.records=recordSelections[this.recordSelection].apply(this)},IGUpdate.prototype.getValues=function(){return this.updateMethods[this.type].apply(this)},IGUpdate.prototype.setValues=function(){let self=this,focus=!0;function valToString(val){let stringVal;return stringVal="number"==typeof val?val.toString():null===val?"":val}self.records.forEach(function(record,idx){self.ig$.interactiveGrid("setSelectedRecords",record,focus),focus=!1,self.grid.setEditMode(!0),self.data[idx].forEach(function(column){column.isAffected&&(Array.isArray(column.value)&&(column.value=column.value.map(valToString)),apex.item(column.staticId).setValue(column.value))})}),self.ig$.interactiveGrid("setSelectedRecords",self.records),self.grid.setEditMode(!1),apex.da.resume(self.da.resumeCallback,!1)},IGUpdate.prototype.getCurrentData=function(){let self=this,value;return this.records.map(function(record){return self.columnConfig.map(function(column){return(value=self.model.getValue(record,column.name))&&value.v&&(Array.isArray(value.v)&&(value=value.v.join(":")),value=value.v),value=value||"",{name:column.name,value:value,dataType:column.dataType,formatMask:column.appearance.formatMask,isReadOnly:column.isReadOnly,isAffected:self.affectedColumns.indexOf(column.name)>-1,staticId:column.staticId}})})},IGUpdate.prototype.ajaxCallback=function(){let self=this,deferred=$.Deferred();return apex.server.plugin(this.ajaxIdentifier,{x01:this.type,p_clob_01:JSON.stringify(this.data),pageItems:this.itemsToSubmit},{loadingIndicator:this.ig$,loadingIndicatorPosition:"centered"}).then(function(data){self.data=data,deferred.resolve()}),deferred.promise()},IGUpdate.prototype.updateWithStaticValue=function(){let self=this,deferred=$.Deferred();return this.data=this.data.map(function(record){return record.map(function(column){return column.isAffected&&(column.value=self.staticValue),column})}),deferred.resolve(),deferred.promise()},IGUpdate.prototype.updateWithJavaScriptExpressionValues=function(){let self=this,deferred=$.Deferred(),columnValues=[],value;return this.data=this.data.map(function(record){return columnValues=[],columnValues=self.jsColumns.map(function(columnName){let column=record.filter(function(column){return column.name===columnName})[0];return column?column.value:""}),record.map(function(column){return column.isAffected&&(value=self.jsExpression.apply(null,columnValues),column.value=value),column})}),deferred.resolve(),deferred.promise()},IGUpdate.prototype.updateWithDialogReturnItems=function(){return console.log(this.da.data),this.staticValue=this.da.data[this.dialogReturnItem],this.updateWithStaticValue()},namespace.IGSetColumnValues={setValue:setValue}}(window.mho);